version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    networks:
      - elastic-jaeger
    ports:
      - 9200:9200
      - 9300:9300
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=1234567890
    volumes:
      - ./docker/elasticsearch/data:/usr/share/elasticsearch/data

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    ports:
      # - "4317:4317"
      # - "4318:4318"
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
    networks:
      - elastic-jaeger
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--es.username=elastic",
      "--es.password=1234567890",
      "--log-level=error"
    ]
    depends_on:
      - elasticsearch

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    networks:
      - elastic-jaeger
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug",
      "--es.username=elastic",
      "--es.password=1234567890"
    ]
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.95.0
    volumes:
      - ./config.yaml:/etc/otelcol-contrib/config.yaml
      - ./docker/otel-collector/ca.pem:/etc/otelcol-contrib/ca.pem
      - ./docker/otel-collector/server.pem:/etc/otelcol-contrib/server.pem
      - ./docker/otel-collector/server-key.pem:/etc/otelcol-contrib/server-key.pem
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    restart: unless-stopped
    depends_on:
      - keycloak
      - prometheus
    networks:
      - elastic-jaeger

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev"]
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=keycloak-database
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=12345678
      - KC_DB_POOL_MAX_SIZE=10
      - KC_HOSTNAME_STRICT=false
      # - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/keycloak-server.cry.pem
      # - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/keycloak-server.key.pem
    ports:
      - 8080:8080
      - 8443:8443
    depends_on:
      - keycloak-database
    networks:
      - elastic-jaeger
    volumes:
      - ./keycloak-server.cry.pem:/opt/keycloak/conf/keycloak-server.cry.pem
      - ./keycloak-server.key.pem:/opt/keycloak/conf/keycloak-server.key.pem
    security_opt:
      - seccomp:unconfined
  keycloak-database:
    image: "postgres"
    environment:
      - POSTGRES_PASSWORD=12345678
    ports:
      - 5555:5432
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data/
    networks:
      - elastic-jaeger

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.config.file=/etc/prometheus/web.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/data:/prometheus
      - ./web.yml:/etc/prometheus/web.yml
    networks:
      - elastic-jaeger

  grafana:
    image: grafana/grafana-enterprise:latest
    ports:
      - 3000:3000
    volumes:
      - ./docker/grafana:/var/lib/grafana
    networks:
      - elastic-jaeger

networks:
  elastic-jaeger:
    driver: bridge